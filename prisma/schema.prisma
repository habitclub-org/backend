// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int       @id @default(autoincrement())
  email           String?   @unique
  name            String
  profileImageUrl String?   @map("profile_image_url")
  checkDays       Int?      @map("check_days")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime? @updatedAt @map("updated_at")

  userGroup             UserGroup[]
  group                 Group[]
  userMission           UserMission[]
  userMissionStatistics UserMissionStatistics[]
  userTag               UserTag[]
  missionComplete       MissionComplete[]
  BoardLike             BoardLike[]
  Board                 Board[]

  @@map("users")
}

model Group {
  id                     Int       @id @default(autoincrement())
  name                   String
  hostId                 Int       @map("host_id")
  thumbnailImageUrl      String?   @map("thumbnail_image_url")
  maximumMember          Int       @default(12) @map("maximum_member")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime? @updatedAt @map("updated_at")
  enrollmentAvailability Boolean   @default(true) @map("enrollment_availability")
  groupDescription       String?   @map("group_description")
  groupStatusId          Int       @map("group_status_id")
  missionTypeId          Int       @map("mission_type_id")

  host        User        @relation(fields: [hostId], references: [id])
  groupStatus GroupStatus @relation(fields: [groupStatusId], references: [id])
  missionType MissionType @relation(fields: [missionTypeId], references: [id])
  groupTag    GroupTag[]
  userGroup   UserGroup[]
  mission     Mission[]
  Board       Board[]

  @@map("groups")
}

model GroupStatus {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  group Group[]

  @@map("group_status")
}

model Mission {
  id             Int       @id @default(autoincrement())
  name           String
  content        String?
  startsAt       DateTime  @map("starts_at")
  endsAt         DateTime  @map("ends_at")
  checkStartTime DateTime? @map("check_start_time") @db.Time(0)
  checkEndTime   DateTime? @map("check_end_time") @db.Time(0)
  groupId        Int       @map("group_id")
  createdAt      DateTime  @default(now()) @map("created_at")

  group                 Group                   @relation(fields: [groupId], references: [id])
  userMission           UserMission[]
  userMissionStatistics UserMissionStatistics[]
  missionComplete       MissionComplete[]

  @@map("missions")
}

model MissionType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  group Group[]

  @@map("mission_types")
}

model TagCategory {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  tag Tag[]

  @@map("tag_categories")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String
  categoryId Int?     @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")

  category TagCategory? @relation(fields: [categoryId], references: [id])
  groupTag GroupTag[]
  userTag  UserTag[]

  @@map("tags")
}

model GroupTag {
  id        Int      @id @default(autoincrement())
  groupId   Int      @map("group_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")

  group Group @relation(fields: [groupId], references: [id])
  tag   Tag   @relation(fields: [tagId], references: [id])

  @@map("group_tags")
}

model UserTag {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tagId     Int      @map("tage_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@map("user_tags")
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  groupId   Int      @map("group_id")
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("user_groups")
}

model UserMission {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  missionId Int      @map("mission_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id])
  mission Mission @relation(fields: [missionId], references: [id])

  @@map("user_missions")
}

model MissionComplete {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  missionId Int       @map("mission_id")
  date      DateTime? @db.Date
  createdAt DateTime  @default(now()) @map("created_at")

  user         User           @relation(fields: [userId], references: [id])
  mission      Mission        @relation(fields: [missionId], references: [id])
  MissionImage MissionImage?
  missionBoard missionBoard[]

  @@unique([userId, missionId, date])
  @@map("mission_completes")
}

model MissionImage {
  id                Int      @id @default(autoincrement())
  missionCompleteId Int      @unique @map("mission_complete_id")
  imageUrl          String   @map("image_url")
  createdAt         DateTime @default(now()) @map("created_at")

  missionComplete MissionComplete @relation(fields: [missionCompleteId], references: [id])

  @@map("mission_images")
}

model UserMissionStatistics {
  id               Int       @id @default(autoincrement())
  userId           Int       @map("user_id")
  missionId        Int       @map("mission_id")
  totalCheckNeeded Int?      @map("total_check_needed")
  checkCompleted   Int?      @map("check_completed")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id])
  mission Mission @relation(fields: [missionId], references: [id])

  @@unique([userId, missionId])
  @@map("user_mission_statistics")
}

model Board {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  groupId     Int       @map("group_id")
  boardTypeId Int       @map("board_type_id")
  content     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  boardType    BoardType      @relation(fields: [boardTypeId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  group        Group          @relation(fields: [groupId], references: [id])
  BoardLike    BoardLike[]
  missionBoard missionBoard[]

  @@map("boards")
}

model missionBoard {
  id         Int      @id @default(autoincrement())
  boardId    Int      @map("board_id")
  completeId Int      @map("complete_id")
  createdAt  DateTime @default(now()) @map("created_at")

  board    Board           @relation(fields: [boardId], references: [id])
  complete MissionComplete @relation(fields: [completeId], references: [id])

  @@map("mission_boards")
}

model BoardType {
  id    Int     @id @default(autoincrement())
  name  String
  Board Board[]

  @@map("board_types")
}

model BoardLike {
  id           Int      @id @default(autoincrement())
  boardId      Int      @map("board_id")
  userId       Int      @map("user_id")
  emoticonCode String   @map("emoticon_code")
  createdAt    DateTime @default(now()) @map("created_at")

  board Board @relation(fields: [boardId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("board_likes")
}
